<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fonekart</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
        crossorigin="anonymous"></script>

    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #3c3b3b27;
            margin: 0;
            padding: 0;
            border-color: black;
        }

        .container {
            width: 50%;
            margin: 50px auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        label {
            display: block;
            margin-bottom: 8px;
        }

        input,
        select {
            width: 100%;
            padding: 8px;
            margin-bottom: 16px;
            box-sizing: border-box;
        }

        button {
            background-color: #4caf50;
            color: #fff;
            padding: 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        button:hover {
            background-color: #45a049;
        }
        #imagePreviews {
            display: flex;
            flex-wrap: wrap;
            margin-top: 10px;
        }

        .imagePreviewContainer {
            position: relative;
            margin-right: 10px;
            margin-bottom: 10px;
        }

        .imagePreviewContainer button {
            position: absolute;
            top: 0;
            right: 0;
            background-color: #f44336;
        }

        .imagePreviewContainer button:hover {
            background-color: #d32f2f;
        }

        #imagePreviews img {
            width: 100px;
            height: 100px;
        }
    </style>
</head>

<body>

    <nav class="navbar navbar-expand-lg navbar-light bg-dark fixed-top p-3">
        <a style="color: #0F0;" class="navbar-brand" href="/product_management"><b><em>Fonekart</em></b></a>
    </nav>

    <div class="container" style="margin-top: 85px;">
        <h2 style="color: rgb(0, 157, 255); padding: 12px;"><em>Add Product</em></h2>
        <form action="/api/addproduct" method="post" enctype="multipart/form-data" onsubmit="addproduct(); return false;">
            <label for="productName">Product Name:</label>
            <input type="text" id="productName" name="productName" class="form-control">
            <p style="color: #f65f5f;" id="pn"></p>

            <label for="categoryName">Category Name</label>
            <select class="form-control" name="categoryName" id="categoryName" value="<%= categoryData.category %>">
                <% for(let i=0;i<categoryData.length;i++) {%>
                    <option>
                        <%= categoryData[i].category %>
                    </option>
                <% } %>
            </select>

            <label for="productModel">Product Model:</label>
            <input type="text" id="productModel" name="productModel" class="form-control">
            <p style="color: #f65f5f;" id="pm"></p>

            <label for="price">First price:</label>
            <input type="number" id="price" name="price" step="0.01" class="form-control">
            <p style="color: #f65f5f;" id="pr"></p>

            <label for="color">Color:</label>
            <input type="text" id="color" name="color" class="form-control">
            <p style="color: #f65f5f;" id="clr"></p>

            <label for="unit">Quantity:</label>
            <input type="number" id="unit" name="Quantity" class="form-control">
            <p style="color: #f65f5f;" id="qnt"></p>

            <label for="image">Image:</label>
            <input type="file" id="image" name="file" multiple onchange="previewImages()" class="form-control">
            <p style="color: #f65f5f;" id="img"></p>

            <div id="imagePreviews"></div>

            <button type="submit" class="btn btn-primary">Add Product</button>
        </form>
    </div>





<script>
    function addproduct() {

        const pmodel = document.getElementById('productModel').value
        const pprice = document.getElementById('price').value
        const pcolor = document.getElementById('color').value
        const punit = document.getElementById('unit').value
        const pimage = document.getElementById('image').files[0]; // Get the selected file
        const pname = document.getElementById('productName').value

        const pmErr = document.getElementById('pm')
        const prErr = document.getElementById('pr')
        const clrErr = document.getElementById('clr')
        const uniErr = document.getElementById('qnt')
        const imgErr = document.getElementById('img')
        const pnErr = document.getElementById('pn')


        const pmErrmsg = []
        const prErrmsg = []
        const clrErrmsg = []
        const uniErrmsg = []
        const imgErrmsg = []
        const pnErrmsg = [] 

        if (pname.trim() === "") {
            pnErrmsg.push("This field is required")
        }

        if (pmodel.trim() === "") {
            pmErrmsg.push("This field is required")
        }

        if (pprice.trim() === "") {
            prErrmsg.push("This field is required")
        }

        if (pprice < 0 ){
            prErrmsg.push("Negative value not allowed")
        }
        if (pprice == 0 ){
            prErrmsg.push("give propper price")
        }

        if (punit.trim() === "") {
            uniErrmsg.push("This field is required")
        }

        if (punit < 0 ){
            uniErrmsg.push("Negative value not allowed")
        }

        if (punit == 0 ){
            uniErrmsg.push("Zero not allowed")
        }

        if (!pimage) {
            imgErrmsg.push("Please select an image file")
        }

        // if (!pimage) {
        //     imgErrmsg.push("Please select an image file")
        // } else {
        //     const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
        //     if (!allowedTypes.includes(pimage.type)) {
        //         imgErrmsg.push("Only JPEG, PNG, and GIF files are allowed");
        //     }
        // }

        if (pcolor.trim() === "") {
            clrErrmsg.push("This field is required")
        }

        pmErr.innerHTML = pmErrmsg.join(". ")
        prErr.innerHTML = prErrmsg.join(". ")
        clrErr.innerHTML = clrErrmsg.join(". ")
        uniErr.innerHTML = uniErrmsg.join(". ")
        imgErr.innerHTML = imgErrmsg.join(". ")
        pnErr.innerHTML = pnErrmsg.join(". ")

        if (pmErrmsg.length === 0 && prErrmsg.length === 0  && clrErrmsg.length === 0 && uniErrmsg.length === 0 && imgErrmsg.length === 0 && pnErrmsg.length === 0) {
           
            const form = document.querySelector('form');
            form.submit();
        }
    }

    function previewImages() {
            const previewContainer = document.getElementById('imagePreviews');
            const filesInput = document.getElementById('image');
            const files = filesInput.files;

            previewContainer.innerHTML = ''; // Clear previous previews

            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                const reader = new FileReader();

                reader.onload = function () {
                    const imgElement = document.createElement('img');
                    imgElement.src = reader.result;

                    const previewWrapper = document.createElement('div');
                    previewWrapper.className = 'imagePreviewContainer';

                    const removeButton = document.createElement('button');
                    removeButton.textContent = 'Remove';
                    removeButton.className = 'btn btn-danger';
                    removeButton.onclick = function () {
                        previewWrapper.remove(); // Remove the image preview container
                        // Remove the corresponding file from input
                        const newFiles = Array.from(filesInput.files);
                        newFiles.splice(i, 1);
                        filesInput.value = null; // Clear the input field
                        setTimeout(() => {
                            filesInput.files = new FileList(newFiles); // Set the updated files
                        });
                    };

                    previewWrapper.appendChild(imgElement);
                    previewWrapper.appendChild(removeButton);
                    previewContainer.appendChild(previewWrapper);
                }

                reader.readAsDataURL(file);
            }
        }
</script>
</body>
</html>